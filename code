# Import necessary libraries
import pandas as pd
import numpy as np

# Load the dataset
train_df = pd.read_csv('/content/train.csv')
test_df = pd.read_csv('/content/test.csv')

# Data Preprocessing

# Handle missing values in the 'Age' and 'Fare' columns
train_df['Age'].fillna(train_df['Age'].median(), inplace=True)
test_df['Age'].fillna(test_df['Age'].median(), inplace=True)
test_df['Fare'].fillna(test_df['Fare'].median(), inplace=True)

# Encode categorical features ('Sex' and 'Embarked')
train_df = pd.get_dummies(train_df, columns=['Sex', 'Embarked'], drop_first=True)
test_df = pd.get_dummies(test_df, columns=['Sex', 'Embarked'], drop_first=True)

# Feature Engineering

# Create a new feature 'FamilySize' by combining 'SibSp' and 'Parch'
train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch']
test_df['FamilySize'] = test_df['SibSp'] + test_df['Parch']

# Drop unnecessary columns
drop_columns = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp', 'Parch']
train_df.drop(drop_columns, axis=1, inplace=True)
test_df.drop(drop_columns, axis=1, inplace=True)

# EDA (Exploratory Data Analysis)

# You can perform EDA by creating visualizations and summary statistics to explore the data further.
# For example, you can plot the distribution of 'Age' or 'Fare' and analyze survival rates by various factors.

# Model Building and Evaluation

# Import machine learning libraries
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Split the training dataset into features (X) and target (y)
X = train_df.drop('Survived', axis=1)
y = train_df['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Generate a classification report
report = classification_report(y_test, y_pred)
print(report)
# Make predictions on the test dataset
test_predictions = model.predict(test_df)

# Create a DataFrame for submission
submission_df = pd.DataFrame({'PassengerId': pd.read_csv('/content/test.csv')['PassengerId'],
                              'Survived': test_predictions})

# Save the submission file as a CSV
submission_df.to_csv('titanic_submission.csv', index=False)
from IPython.display import Markdown

# Generate a classification report
report = classification_report(y_test, y_pred)

# Display the classification report as Markdown text
display(Markdown(report))
